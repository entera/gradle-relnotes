//-------------------------------------------------------------------------------------------------
// GRADLE PLUGINS.
//-------------------------------------------------------------------------------------------------

buildscript {
    repositories {
        if (project.hasProperty("useMavenLocal")) {
            mavenLocal()
        }
        jcenter()
    }
    dependencies {
        classpath "de.entera:gradle-relnotes-plugin:0.1.0"
    }
}

plugins {
    // upload build artifacts to bintray and maven central.
    id "com.jfrog.bintray" version "1.2"

    // publish plugins to the gradle plugin portal.
    id "com.gradle.plugin-publish" version "0.9.0"
}

//-------------------------------------------------------------------------------------------------
// ROOT PROJECT.
//-------------------------------------------------------------------------------------------------

// print welcome message.
apply from: rootProject.file("gradle/welcome.gradle")

// only our subprojects have a bintray configuration. replace the root project's `bintrayUpload`
// task with one that restricts the calls to the subprojects.
project.afterEvaluate {
    task bintrayUpload(group: "publishing", overwrite: true) {
        dependsOn subprojects.bintrayUpload
    }
}

project(":") { project ->
    // provide assemble and clean tasks.
    apply plugin: "base"

    // task to add gradle wrapper files.
    task wrapper(type: Wrapper, group: "build setup") {
        gradleVersion = project.gradleVersion
    }

    // task to print gradle and groovy versions.
    task versions(group: "help") << {
        println "Java version: ${System.properties["java.version"]}"
        println "Gradle version: ${project.gradle.gradleVersion}"
        println "Groovy version: ${GroovySystem.version}"
    }

    ext {
        // add build time and date to project attributes.
        def buildTimeAndDate = new Date()
        buildDate = buildTimeAndDate.format("yyyy-MM-dd")
        buildTime = buildTimeAndDate.format("HH:mm:ss.SSSZ")

        // add java version and vendor to project attributes.
        javaVersion = System.properties["java.version"]
        javaVendor = System.properties["java.vendor"]
        javaVmVersion = System.properties["java.vm.version"]
    }

    // provide release notes task.
    apply plugin: "de.entera.relnotes"

    // configure release notes generator.
    releaseNotes {
        targetFile rootProject.file(project.changesFile)
        githubRepo project.githubRepo
        if (project.hasProperty("githubKey")) {
            githubKey project.githubKey
        }
    }
}

//-------------------------------------------------------------------------------------------------
// EACH PROJECT.
//-------------------------------------------------------------------------------------------------

allprojects { project ->
    // task to create main and test source directories.
    task sourceDirs(group: "build setup") << {
        if (project != rootProject) {
            sourceSets*.allSource.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }

    // use the gradle publishing plugin.
    apply plugin: "com.gradle.plugin-publish"
}

//-------------------------------------------------------------------------------------------------
// EACH SUBPROJECT.
//-------------------------------------------------------------------------------------------------

subprojects { project ->
    // provide java and groovy configurations and tasks.
    apply plugin: "java"
    apply plugin: "groovy"

    // maven repositories for dependencies.
    repositories {
        if (project.hasProperty("useMavenLocal")) {
            mavenLocal()
        }
    }

    // source code compatible to java 8.
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // configure publish tasks.
    apply from: rootProject.file("gradle/publish.gradle")

    // task to create jar with source code.
    task sourceJar(type: Jar) {
        group "Build"
        description "An archive of the source code"
        classifier "sources"
        //from sourceSets.main.allJava
        from sourceSets.main.allGroovy
    }

    // task to create jar with javadocs.
    task javadocJar(type: Jar) {
        group "Build"
        description "An archive of the javadoc"
        classifier "javadoc"
        //from javadoc
        from groovydoc
    }

    jar.finalizedBy sourceJar
    jar.finalizedBy javadocJar

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    // configure jar task to include manifest attributes.
    jar {
        manifest.attributes(
            "Created-By": project.javaVersion +
                " (" + project.javaVendor + " " + project.javaVmVersion + ")",
            "Build-Date": project.buildDate,
            "Build-Time": project.buildTime,
            "Specification-Title": project.name,
            "Specification-Version": project.version,
            "Specification-Vendor": project.vendor,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": project.vendor
        )
    }

    // configure javadoc task for java 8.
    javadoc {
        options.addStringOption("Xdoclint:none", "-quiet")
    }
}
